// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialMediaApp.Infrastructure.Data;

#nullable disable

namespace SocialMediaApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711153849_ModifyDB1")]
    partial class ModifyDB1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("Chat", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Chat");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.ChatMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMember", (string)null);

                    b.HasDiscriminator().HasValue("ChatMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.CurrentOnlineUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("CurrentOnlineUsers");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.FriendShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendShips");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.FriendShipRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReseaverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReseaverId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendShipRequests");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("TimeSended")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Message");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.MessageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageStatus", (string)null);
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChat", b =>
                {
                    b.HasBaseType("SocialMediaApp.Core.Entities.Chat");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupPicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("GROP");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwosomeChat", b =>
                {
                    b.HasBaseType("SocialMediaApp.Core.Entities.Chat");

                    b.HasDiscriminator().HasValue("TWIC");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChatMember", b =>
                {
                    b.HasBaseType("SocialMediaApp.Core.Entities.ChatMember");

                    b.Property<int?>("GroupChatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOut")
                        .HasColumnType("bit");

                    b.HasIndex("GroupChatId");

                    b.HasDiscriminator().HasValue("GroupChatMember");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwoSomeChatMember", b =>
                {
                    b.HasBaseType("SocialMediaApp.Core.Entities.ChatMember");

                    b.Property<int?>("TwosomeChatID")
                        .HasColumnType("int");

                    b.HasIndex("TwosomeChatID");

                    b.HasDiscriminator().HasValue("TwoSomeChatMember");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChatMessage", b =>
                {
                    b.HasBaseType("SocialMediaApp.Core.Entities.Message");

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.HasIndex("ChatId");

                    b.HasIndex("MemberId");

                    b.HasDiscriminator().HasValue("GROP");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwosomeChatMessage", b =>
                {
                    b.HasBaseType("SocialMediaApp.Core.Entities.Message");

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.HasIndex("ChatId");

                    b.HasIndex("MemberId");

                    b.ToTable("Messages", t =>
                        {
                            t.Property("ChatId")
                                .HasColumnName("TwosomeChatMessage_ChatId");

                            t.Property("MemberId")
                                .HasColumnName("TwosomeChatMessage_MemberId");
                        });

                    b.HasDiscriminator().HasValue("TWIC");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.ApplicationUser", b =>
                {
                    b.OwnsMany("SocialMediaApp.Core.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiredOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.ChatMember", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", "User")
                        .WithMany("ChatMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.CurrentOnlineUsers", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", "User")
                        .WithMany("CurrentConnectionId")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.FriendShip", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", "Friend")
                        .WithMany("FriendShipsAddedMe")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", "User")
                        .WithMany("FriendShipsAddedByMe")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.FriendShipRequest", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", "Reseaver")
                        .WithMany("FriendShipRequestsSendedToMe")
                        .HasForeignKey("ReseaverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialMediaApp.Core.Entities.ApplicationUser", "User")
                        .WithMany("FriendShipRequestsISend")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Reseaver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.MessageStatus", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.ChatMember", "Member")
                        .WithMany("Status")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaApp.Core.Entities.Message", "Message")
                        .WithMany("MessageStatus")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChatMember", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.GroupChat", "GroupChat")
                        .WithMany("Members")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GroupChat");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwoSomeChatMember", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.TwosomeChat", "TwosomeChat")
                        .WithMany("Members")
                        .HasForeignKey("TwosomeChatID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TwosomeChat");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChatMessage", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.GroupChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialMediaApp.Core.Entities.GroupChatMember", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Chat");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwosomeChatMessage", b =>
                {
                    b.HasOne("SocialMediaApp.Core.Entities.TwosomeChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SocialMediaApp.Core.Entities.TwoSomeChatMember", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Chat");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ChatMemberships");

                    b.Navigation("CurrentConnectionId");

                    b.Navigation("FriendShipRequestsISend");

                    b.Navigation("FriendShipRequestsSendedToMe");

                    b.Navigation("FriendShipsAddedByMe");

                    b.Navigation("FriendShipsAddedMe");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.ChatMember", b =>
                {
                    b.Navigation("Status");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.Message", b =>
                {
                    b.Navigation("MessageStatus");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwosomeChat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.GroupChatMember", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialMediaApp.Core.Entities.TwoSomeChatMember", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
